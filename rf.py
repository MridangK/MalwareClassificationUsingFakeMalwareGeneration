import logging
import coloredlogs
import hydra
import omegaconf
import pickle
from sklearn.ensemble import RandomForestClassifier

from src.utils.utils import PROJECT_ROOT

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.DEBUG, logger=logger)


class RandomForest:
    def __init__(self, param):
        self.param = param
        self.clf = RandomForestClassifier(
            n_estimators=self.param.n_estimators,
            criterion=self.param.criterion,
            max_depth=self.param.max_depth,
            min_samples_split=self.param.min_samples_split,
            min_samples_leaf=self.param.min_samples_leaf,
            random_state=self.param.random_state
        )

    def train(self, X_train, y_train, save_path):
        train_acc = self.clf.fit(X_train, y_train).score(X_train, y_train)

        with open(save_path + '.pckl', 'wb') as f:
            pickle.dump(self.clf, f)

        return train_acc

    def evaluate(self, X_test, y_test):
        test_acc = self.clf.score(X_test, y_test)

        return test_acc


@hydra.main(config_path=str(PROJECT_ROOT / 'conf'),
            config_name='default', version_base=None)
def main(cfg: omegaconf.DictConfig):
    random_forest = hydra.utils.instantiate(
        cfg.rf.rf_module,
        _recursive_=False
    )
    print("Success!") if random_forest else print("Fail!")


if __name__ == "__main__":
    logger.propagate = False
    main()
