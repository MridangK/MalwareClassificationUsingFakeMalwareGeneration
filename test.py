import logging
import os

import coloredlogs
import hydra
import numpy as np
import omegaconf
import tensorflow as tf
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
import mlflow
from sklearn.model_selection import train_test_split
from omegaconf import DictConfig
from sklearn.svm import OneClassSVM

from src.utils.utils import PROJECT_ROOT, MALWARE_LABELS, MyTimer, log_params

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.DEBUG, logger=logger)

logging.getLogger('git').setLevel(logging.ERROR)
logging.getLogger('urllib3').setLevel(logging.ERROR)
logging.getLogger('matplotlib').setLevel(logging.ERROR)
logging.getLogger('tensorflow').setLevel(logging.ERROR)
logging.getLogger('h5py').setLevel(logging.ERROR)

def train_and_eval(cfg: DictConfig):
    datamodule = hydra.utils.instantiate(
        cfg.data.datamodule, _recursive_=False
    )

    sample_size, X_real, y_real, X_fake, y_fake = datamodule.prepare_data()
    X_train, X_test = [], []
    for i in range(len(y_real)):
        if y_real[i] == 0:
            X_train.append(X_real[i])
        if y_fake[i] == 0:
            X_test.append(X_fake[i])

    param_grid = {
        'kernel': ['rbf', 'poly', 'sigmoid', 'linear']
    }

    clf = OneClassSVM(
        nu=0.01,
        kernel='poly',
        gamma=0.3
    )

    y_real = np.full(len(X_train), 1)
    grid = GridSearchCV(clf, param_grid, cv=5, scoring='accuracy')
    grid.fit(X_train, y_real)
    print(grid.best_params_)
    print(grid.cv_results_['params'])
    # print(grid.cv_results_['mean_train_score'])
    print(grid.cv_results_['mean_test_score'])

    print()
    print('Kernel: Poly')
    clf.fit(X_train)
    train_pred = clf.predict(X_train)
    train_acc = accuracy_score(y_real, train_pred)
    print(train_acc)

    test_pred = clf.predict(X_test)
    y_fake = np.full(len(test_pred), -1)
    test_acc = accuracy_score(y_fake, test_pred)
    print(test_acc)

    print()
    print('Kernel: rbf')
    clf = OneClassSVM(
        nu=0.01,
        kernel='rbf',
        gamma=0.3
    )
    clf.fit(X_train)
    train_pred = clf.predict(X_train)
    train_acc = accuracy_score(y_real, train_pred)
    print(train_acc)

    test_pred = clf.predict(X_test)
    y_fake = np.full(len(test_pred), -1)
    test_acc = accuracy_score(y_fake, test_pred)
    print(test_acc)


@hydra.main(config_path=str(PROJECT_ROOT / 'conf'),
            config_name='default', version_base=None)
def main(cfg: omegaconf.DictConfig):
    train_and_eval(cfg)


if __name__ == '__main__':
    logger.propagate = False
    logger.info("Num GPUs Available: "
                f"{len(tf.config.list_physical_devices('GPU'))}")
    main()